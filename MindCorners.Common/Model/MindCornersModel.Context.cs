//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MindCorners.Common.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MindCornersEntities : DbContext
    {
        public MindCornersEntities()
            : base("name=MindCornersEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Circle> Circles { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<CircleUser> CircleUsers { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<GridState> GridStates { get; set; }
        public virtual DbSet<MessageTemplate> MessageTemplates { get; set; }
        public virtual DbSet<NotificationRecipient> NotificationRecipients { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<PostTemplate> PostTemplates { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<UserContact> UserContacts { get; set; }
        public virtual DbSet<Invitation> Invitations { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<TextTemplate> TextTemplates { get; set; }
        public virtual DbSet<PostAttachment> PostAttachments { get; set; }
    
        [DbFunction("MindCornersEntities", "Organizations_GetAll")]
        public virtual IQueryable<Organizations_GetAll_Result> Organizations_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Organizations_GetAll_Result>("[MindCornersEntities].[Organizations_GetAll]()");
        }
    
        [DbFunction("MindCornersEntities", "MessageTemplates_GetAll")]
        public virtual IQueryable<MessageTemplates_GetAll_Result> MessageTemplates_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MessageTemplates_GetAll_Result>("[MindCornersEntities].[MessageTemplates_GetAll]()");
        }
    
        [DbFunction("MindCornersEntities", "Users_GetAll")]
        public virtual IQueryable<Users_GetAll_Result> Users_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Users_GetAll_Result>("[MindCornersEntities].[Users_GetAll]()");
        }
    
        [DbFunction("MindCornersEntities", "Configs_GetAll")]
        public virtual IQueryable<Configs_GetAll_Result> Configs_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Configs_GetAll_Result>("[MindCornersEntities].[Configs_GetAll]()");
        }
    
        [DbFunction("MindCornersEntities", "Posts_GetForList")]
        public virtual IQueryable<Posts_GetForList_Result> Posts_GetForList(Nullable<System.Guid> userId, Nullable<int> count, Nullable<int> skip, string searchText)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Posts_GetForList_Result>("[MindCornersEntities].[Posts_GetForList](@UserId, @Count, @Skip, @SearchText)", userIdParameter, countParameter, skipParameter, searchTextParameter);
        }
    
        [DbFunction("MindCornersEntities", "Posts_GetThemeItem")]
        public virtual IQueryable<Posts_GetThemeItem_Result> Posts_GetThemeItem(Nullable<System.Guid> postId)
        {
            var postIdParameter = postId.HasValue ?
                new ObjectParameter("PostId", postId) :
                new ObjectParameter("PostId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Posts_GetThemeItem_Result>("[MindCornersEntities].[Posts_GetThemeItem](@PostId)", postIdParameter);
        }
    
        [DbFunction("MindCornersEntities", "Notifications_GetAllByUser")]
        public virtual IQueryable<Notifications_GetAllByUser_Result> Notifications_GetAllByUser(Nullable<System.Guid> userId, Nullable<int> count, Nullable<int> skip)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Notifications_GetAllByUser_Result>("[MindCornersEntities].[Notifications_GetAllByUser](@UserId, @Count, @Skip)", userIdParameter, countParameter, skipParameter);
        }
    }
}
